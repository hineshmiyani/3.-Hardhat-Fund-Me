{
  "address": "0x9293f9Cba2919Fa0951829e874DF826749e9853E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressTOoAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x66f62e393b77e00f8f682e70d20570228827036edcb5f36ce65a2e1fea26899c",
  "receipt": {
    "to": null,
    "from": "0x630A676DEca0952791Ea3A6BB9751d2f06540ee1",
    "contractAddress": "0x9293f9Cba2919Fa0951829e874DF826749e9853E",
    "transactionIndex": 13,
    "gasUsed": "1061717",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x88fc9c329732712c68ba4b81e0f9ed79b11b806f64decb8ae43cafd0995ac0e0",
    "transactionHash": "0x66f62e393b77e00f8f682e70d20570228827036edcb5f36ce65a2e1fea26899c",
    "logs": [],
    "blockNumber": 11001121,
    "cumulativeGasUsed": "3701226",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 2,
  "solcInputHash": "66ca85bc4695e5a78d661f6784b493bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressTOoAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Hinesh Miyani\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"constructor receive function (if exists) fallback function (if exists) external public internal private view / pure\"},\"fund()\":{\"notice\":\"This function fund this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Pragma\\npragma solidity ^0.8.8;\\n\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error Codes\\nerror FundMe__NotOwner(); // NameOfTheContract__NameOfTheError\\n\\n// Interfaces, Libraries, Contracts\\n\\n/** @title A contract for crowd funding\\n *  @author Hinesh Miyani\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    // get pricefeed of current contract address\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    /* Order of Functions */\\n    /// constructor\\n    /// receive function (if exists)\\n    /// fallback function (if exists)\\n    /// external\\n    /// public\\n    /// internal\\n    /// private\\n    /// view / pure\\n\\n    // constructor\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    // receive function\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // fallback function\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function fund this contract\\n     *  @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call Failed\\\");\\n    }\\n\\n    // View / Pure functions\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressTOoAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0xf4e82eb011498d9cb5834cdce5bd684240659611e078fc2f4daa1a692919ed63\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// Why is this a library and not abstract?\\r\\n// Why not an interface?\\r\\nlibrary PriceConverter {\\r\\n  // We could make this public, but then we'd have to deploy it\\r\\n  function getPrice(AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    // Rinkeby ETH / USD Address\\r\\n    // https://docs.chain.link/docs/ethereum-addresses/\\r\\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\r\\n    // );\\r\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n    // ETH/USD rate in 18 digit\\r\\n    return uint256(answer * 10000000000);\\r\\n  }\\r\\n\\r\\n  // 1000000000\\r\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 ethPrice = getPrice(priceFeed);\\r\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n    return ethAmountInUsd;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xdac70fce7ba46e1b78c0704ae7190bc652df1974b4e0af22fe1d8d6c6c094740\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200135738038062001357833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111d86200017f600039600081816102ed0152818161053c01526105d401526111d86000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80633ccfd60b146100985780636b69a592146100a2578063893d20e8146100cd578063978cbd2f146100f85761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b6100a06102eb565b005b3480156100ae57600080fd5b506100b761052b565b6040516100c49190610a5a565b60405180910390f35b3480156100d957600080fd5b506100e2610538565b6040516100ef9190610ab6565b60405180910390f35b34801561010457600080fd5b5061011f600480360381019061011a9190610b02565b610560565b60405161012c9190610a5a565b60405180910390f35b34801561014157600080fd5b5061014a6105a8565b6040516101579190610b8e565b60405180910390f35b6101686101b1565b005b6101726105d2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bd5565b610876565b6040516101a89190610ab6565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108be90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610370576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561041b5760006001828154811061039657610395610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041390610d33565b915050610373565b50600067ffffffffffffffff81111561043757610436610d7c565b5b6040519080825280602002602001820160405280156104655781602001602082028036833780820191505090505b506001908051906020019061047b92919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a290610ddc565b60006040518083038185875af1925050503d80600081146104df576040519150601f19603f3d011682016040523d82523d6000602084013e6104e4565b606091505b5050905080610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051f90610e3d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610657576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076557600082828151811061070357610702610d04565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075d90610d33565b9150506106e5565b50600067ffffffffffffffff81111561078157610780610d7c565b5b6040519080825280602002602001820160405280156107af5781602001602082028036833780820191505090505b50600190805190602001906107c592919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ec90610ddc565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b5050905080610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990610ea9565b60405180910390fd5b5050565b60006001828154811061088c5761088b610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ca836108fa565b90506000670de0b6b3a764000085836108e39190610ec9565b6108ed9190610f52565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190611010565b5050509150506402540be40081610992919061108b565b915050919050565b828054828255906000526020600020908101928215610a13579160200282015b82811115610a125782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ba565b5b509050610a209190610a24565b5090565b5b80821115610a3d576000816000905550600101610a25565b5090565b6000819050919050565b610a5481610a41565b82525050565b6000602082019050610a6f6000830184610a4b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa082610a75565b9050919050565b610ab081610a95565b82525050565b6000602082019050610acb6000830184610aa7565b92915050565b600080fd5b610adf81610a95565b8114610aea57600080fd5b50565b600081359050610afc81610ad6565b92915050565b600060208284031215610b1857610b17610ad1565b5b6000610b2684828501610aed565b91505092915050565b6000819050919050565b6000610b54610b4f610b4a84610a75565b610b2f565b610a75565b9050919050565b6000610b6682610b39565b9050919050565b6000610b7882610b5b565b9050919050565b610b8881610b6d565b82525050565b6000602082019050610ba36000830184610b7f565b92915050565b610bb281610a41565b8114610bbd57600080fd5b50565b600081359050610bcf81610ba9565b92915050565b600060208284031215610beb57610bea610ad1565b5b6000610bf984828501610bc0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c49601b83610c02565b9150610c5482610c13565b602082019050919050565b60006020820190508181036000830152610c7881610c3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb982610a41565b9150610cc483610a41565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf957610cf8610c7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3e82610a41565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7157610d70610c7f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dc6600083610dab565b9150610dd182610db6565b600082019050919050565b6000610de782610db9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e27600b83610c02565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e93600b83610c02565b9150610e9e82610e5d565b602082019050919050565b60006020820190508181036000830152610ec281610e86565b9050919050565b6000610ed482610a41565b9150610edf83610a41565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f1857610f17610c7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5d82610a41565b9150610f6883610a41565b925082610f7857610f77610f23565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fa281610f83565b8114610fad57600080fd5b50565b600081519050610fbf81610f99565b92915050565b6000819050919050565b610fd881610fc5565b8114610fe357600080fd5b50565b600081519050610ff581610fcf565b92915050565b60008151905061100a81610ba9565b92915050565b600080600080600060a0868803121561102c5761102b610ad1565b5b600061103a88828901610fb0565b955050602061104b88828901610fe6565b945050604061105c88828901610ffb565b935050606061106d88828901610ffb565b925050608061107e88828901610fb0565b9150509295509295909350565b600061109682610fc5565b91506110a183610fc5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e0576110df610c7f565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561111d5761111c610c7f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561115a57611159610c7f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119757611196610c7f565b5b82820290509291505056fea2646970667358221220a91699d00c27e38a256cbff1540d406bed07843624472318a84423577bc1c07964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610135578063b60d428814610160578063be2693f01461016a578063d7b4750c146101745761008e565b80633ccfd60b146100985780636b69a592146100a2578063893d20e8146100cd578063978cbd2f146100f85761008e565b3661008e5761008c6101b1565b005b6100966101b1565b005b6100a06102eb565b005b3480156100ae57600080fd5b506100b761052b565b6040516100c49190610a5a565b60405180910390f35b3480156100d957600080fd5b506100e2610538565b6040516100ef9190610ab6565b60405180910390f35b34801561010457600080fd5b5061011f600480360381019061011a9190610b02565b610560565b60405161012c9190610a5a565b60405180910390f35b34801561014157600080fd5b5061014a6105a8565b6040516101579190610b8e565b60405180910390f35b6101686101b1565b005b6101726105d2565b005b34801561018057600080fd5b5061019b60048036038101906101969190610bd5565b610876565b6040516101a89190610ab6565b60405180910390f35b6802b5e3af16b18800006101f0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108be90919063ffffffff16565b1015610231576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022890610c5f565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027f9190610cae565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610370576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561041b5760006001828154811061039657610395610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061041390610d33565b915050610373565b50600067ffffffffffffffff81111561043757610436610d7c565b5b6040519080825280602002602001820160405280156104655781602001602082028036833780820191505090505b506001908051906020019061047b92919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104a290610ddc565b60006040518083038185875af1925050503d80600081146104df576040519150601f19603f3d011682016040523d82523d6000602084013e6104e4565b606091505b5050905080610528576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051f90610e3d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610657576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106db57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610691575b5050505050905060005b815181101561076557600082828151811061070357610702610d04565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075d90610d33565b9150506106e5565b50600067ffffffffffffffff81111561078157610780610d7c565b5b6040519080825280602002602001820160405280156107af5781602001602082028036833780820191505090505b50600190805190602001906107c592919061099a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107ec90610ddc565b60006040518083038185875af1925050503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b5050905080610872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086990610ea9565b60405180910390fd5b5050565b60006001828154811061088c5761088b610d04565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108ca836108fa565b90506000670de0b6b3a764000085836108e39190610ec9565b6108ed9190610f52565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561094357600080fd5b505afa158015610957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097b9190611010565b5050509150506402540be40081610992919061108b565b915050919050565b828054828255906000526020600020908101928215610a13579160200282015b82811115610a125782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109ba565b5b509050610a209190610a24565b5090565b5b80821115610a3d576000816000905550600101610a25565b5090565b6000819050919050565b610a5481610a41565b82525050565b6000602082019050610a6f6000830184610a4b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa082610a75565b9050919050565b610ab081610a95565b82525050565b6000602082019050610acb6000830184610aa7565b92915050565b600080fd5b610adf81610a95565b8114610aea57600080fd5b50565b600081359050610afc81610ad6565b92915050565b600060208284031215610b1857610b17610ad1565b5b6000610b2684828501610aed565b91505092915050565b6000819050919050565b6000610b54610b4f610b4a84610a75565b610b2f565b610a75565b9050919050565b6000610b6682610b39565b9050919050565b6000610b7882610b5b565b9050919050565b610b8881610b6d565b82525050565b6000602082019050610ba36000830184610b7f565b92915050565b610bb281610a41565b8114610bbd57600080fd5b50565b600081359050610bcf81610ba9565b92915050565b600060208284031215610beb57610bea610ad1565b5b6000610bf984828501610bc0565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c49601b83610c02565b9150610c5482610c13565b602082019050919050565b60006020820190508181036000830152610c7881610c3c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb982610a41565b9150610cc483610a41565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf957610cf8610c7f565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d3e82610a41565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7157610d70610c7f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dc6600083610dab565b9150610dd182610db6565b600082019050919050565b6000610de782610db9565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e27600b83610c02565b9150610e3282610df1565b602082019050919050565b60006020820190508181036000830152610e5681610e1a565b9050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e93600b83610c02565b9150610e9e82610e5d565b602082019050919050565b60006020820190508181036000830152610ec281610e86565b9050919050565b6000610ed482610a41565b9150610edf83610a41565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f1857610f17610c7f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f5d82610a41565b9150610f6883610a41565b925082610f7857610f77610f23565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fa281610f83565b8114610fad57600080fd5b50565b600081519050610fbf81610f99565b92915050565b6000819050919050565b610fd881610fc5565b8114610fe357600080fd5b50565b600081519050610ff581610fcf565b92915050565b60008151905061100a81610ba9565b92915050565b600080600080600060a0868803121561102c5761102b610ad1565b5b600061103a88828901610fb0565b955050602061104b88828901610fe6565b945050604061105c88828901610ffb565b935050606061106d88828901610ffb565b925050608061107e88828901610fb0565b9150509295509295909350565b600061109682610fc5565b91506110a183610fc5565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110e0576110df610c7f565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561111d5761111c610c7f565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561115a57611159610c7f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561119757611196610c7f565b5b82820290509291505056fea2646970667358221220a91699d00c27e38a256cbff1540d406bed07843624472318a84423577bc1c07964736f6c63430008080033",
  "devdoc": {
    "author": "Hinesh Miyani",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "constructor receive function (if exists) fallback function (if exists) external public internal private view / pure"
      },
      "fund()": {
        "notice": "This function fund this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}